import os
import logging
from typing import Optional
from dotenv import load_dotenv
from openai import AzureOpenAI
from openai.types.chat import ChatCompletionSystemMessageParam, ChatCompletionUserMessageParam

logger = logging.getLogger(__name__)

class AzureOpenAIService:
    def __init__(self):
        # Charge les variables d'environnement depuis la racine du projet
        load_dotenv()  # Recherche automatiquement .env dans le projet
        
        # R√©cup√®re les vars avec v√©rification
        api_key = os.getenv("AZURE_OPENAI_API_KEY")
        endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
        api_version = os.getenv("AZURE_OPENAI_API_VERSION", "2024-12-01-preview")
        self.deployment_name = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME", "gpt-4o")
        
        if not api_key or not endpoint:
            logger.error(" Variables d'environnement Azure OpenAI manquantes")
            raise EnvironmentError("Variables d'environnement manquantes pour Azure OpenAI.")
        
        # Initialisation du client
        try:
            self.client = AzureOpenAI(
                api_key=api_key,
                azure_endpoint=endpoint,
                api_version=api_version
            )
            logger.info(" Client Azure OpenAI SDK initialis√© avec succ√®s")
        except Exception as e:
            logger.error(f" Erreur initialisation Azure OpenAI: {e}")
            raise
    
    def is_available(self) -> bool:
        """V√©rifie si le service est disponible"""
        return hasattr(self, 'client') and self.client is not None
    
    def analyze_content(self, content: str, model: Optional[str] = None, max_tokens: int = 500, content_type: str = "text") -> str:
        """Effectue une analyse avec le prompt sp√©cifique pour FactGuard."""
        
        if not self.is_available():
            return " Service Azure OpenAI non disponible"
        
        # Utilise le mod√®le de d√©ploiement configur√© ou celui pass√© en param√®tre
        model_to_use = model or self.deployment_name
        
        PROMPT = (
            "Tu es un assistant d'analyse d'information expert en d√©tection de d√©sinformation.\n\n"
            "Selon le type de contenu fourni (texte, lien ou image), tu dois :\n"
            "1. **Analyser l'information transmise**.\n"
            "2. **Comparer avec des faits actuels ou des connaissances fiables**.\n"
            "3. **√âvaluer la fiabilit√© de l'information**.\n\n"
            "R√©ponds toujours en suivant **le format ci-dessous**, avec des **emojis pour plus de lisibilit√©**, "
            "et en conservant **la m√™me structure** dans tous les cas :\n\n"
            "‚úÖ **Analyse termin√©e ! Voici les r√©sultats :**\n\n"
            "üìä **Score de fiabilit√©** :`XX %`\n\n"
            "üìù **Explication** : {analyse synth√©tique en 1 phrases tr√®s courte max, expliquant la base de l'√©valuation}\n\n"
            "üì∂ **Niveau de confiance** :  üü• Faible / üü® Moyen / üü© √âlev√©\n\n"
            "üîó **Source(s) fiable(s) identifi√©e(s)** :\n"
            "{ins√®re ici une ou deux sources cr√©dibles si disponibles, ou √©cris \"Aucune source pertinente trouv√©e\"}\n\n"
            "R√©ponds uniquement dans ce format, quel que soit l'input (texte, lien ou image), sans en sortir."
        )
        

        messages = [
            ChatCompletionSystemMessageParam(role="system", content=PROMPT),
            ChatCompletionUserMessageParam(role="user", content=content)
        ]
        
        try:
            response = self.client.chat.completions.create(
                model=model_to_use,
                messages=messages,
                max_tokens=max_tokens,
                temperature=0.3,
                top_p=0.95
            )
            
            result = response.choices[0].message.content or ""
            logger.info(f" Analyse termin√©e pour contenu de type: {content_type}")
            return result
            
        except Exception as e:
            logger.error(f" Erreur lors de l'analyse: {e}")
            return f" Erreur lors de l'analyse : {str(e)}"
    
    # Alias pour compatibilit√© avec votre code existant
    def analyze_information(self, content: str, content_type: str = 'text') -> str:
        """Alias pour analyze_content - compatibilit√© avec views.py"""
        return self.analyze_content(content, content_type=content_type)



